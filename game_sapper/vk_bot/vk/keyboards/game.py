from typing import Optional

from vk_bot.data_classes import KeyboardEventEnum, MessageFromVK
from vk_bot.vk.keyboards.data_classes import GameSettings
from vk_bot.vk.keyboards.root import RootKeyboard
from vk_bot.vk.vk_keyboard.buttons import Button
from vk_bot.vk.vk_keyboard.data_classes import TypeColor
from vk_bot.vk.vk_keyboard.keyboard import Keyboard as KeyboardSchema
from vk_bot.workers.keyboard import Keyboard


class GameKeyboard(Keyboard):
    name = "GameKeyboard"
    settings: Optional["GameSettings"] = None

    def _init_(self):
        self.keyboard = KeyboardSchema(name=self.__class__.__name__, buttons={}, one_time=False)

    def create_buttons(self):
        """–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏"""
        buttons = {}

        for y, row in enumerate(self.settings.mine_field):
            button_rows = []
            for x, column in enumerate(row):
                button_rows.append(Button(
                    name=f"{x}:{y}",
                    label=f"‚ùì",
                    color=TypeColor.white,
                ))
                self.button_handler[f"{x}:{y}"] = self.button_click
            buttons[y] = button_rows
        self.keyboard.buttons = buttons
        self.keyboard.buttons.update({len(self.keyboard.buttons): [Button(
            name="–ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É",
            label="–ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É",
            color=TypeColor.white,
        )]})
        self.button_handler["–ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É"] = self.button_quit

    async def button_click(self, message: MessageFromVK) -> "KeyboardEventEnum":
        x, y = map(int, message.payload.button_name.split(":"))
        if message.user_id not in self.settings.block:
            await self.click(message, x, y)
        else:
            message.body = f"{await self.bot.get_user_name(message.user_id)}: –î—É—à–∞ —Å–∞–ø–µ—Ä–∞ –≤—Å–µ –Ω–∏ –∫–∞–∫ –Ω–µ —É–ø–æ–∫–æ–∏—Ç—Å—è"
        return KeyboardEventEnum.update

    async def button_quit(self, message: MessageFromVK) -> KeyboardEventEnum:
        # –æ–±–Ω—É–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ, –∏–Ω–∞—á–µ –æ–Ω–∏ –±—É–¥—É—Ç –≤—Å–ø–ª—ã–≤–∞—Ç—å –ø—Ä–∏ –Ω–æ–≤–æ–π –∏–≥—Ä–µ
        self.get_user(message.user_id).set_setting_keyboard(self.__class__.__name__, None)
        return await self.redirect(RootKeyboard, [message.user_id], kill_parent=True)

    async def click(self, message, x, y):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º: –Ω–µ –∑–∞–Ω—è—Ç–∞ –ª–∏ –∫–ª–µ—Ç–∫–∞, —á—Ç–æ –≤ –∫–ª–µ—Ç–∫–µ, –±–æ–º–±–∞ –∏–ª–∏ –≤—Å–µ –æ–∫–µ–π –∏
        –¥–µ–ª–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π """
        if self.keyboard.buttons[y][x].color.value == TypeColor.white.value:
            if self.settings.mine_field[y][x] == -1:
                color = TypeColor.red
                label = "üí£"
                message.body = f"{await self.bot.get_user_name(message.user_id)}: –ü–∞–ª –°–º–µ—Ä—Ç—å—é —Ö—Ä–∞–±—Ä—ã—Ö"
                self.settings.block.append(message.user_id)
            else:
                color = TypeColor.green
                label = f"{self.settings.mine_field[y][x]}"
                message.body = f"{await self.bot.get_user_name(message.user_id)}: –†–∞–∑–º–∏–Ω–∏—Ä–æ–≤–∞–ª –µ—â–µ –æ–¥–Ω—É —è—á–µ–π–∫—É"
            self.keyboard.buttons[y][x].color = color
            self.keyboard.buttons[y][x].label = label
